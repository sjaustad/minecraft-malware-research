# The purpose of this script is to combine live and static data into one file and put them all into 
# a directory called aggregated_data

import os
import json
import shutil

def aggregate_json_data():
    # Define the paths to the directories
    parse_live_results_dir = 'parse_live_results/parsed_analyses'
    static_analysis_dir = 'static_analysis/data'
    aggregated_data_dir = 'aggregated_data'

    # Create the aggregated_data directory if it doesn't exist
    if not os.path.exists(aggregated_data_dir):
        os.makedirs(aggregated_data_dir)

    # Get a list of all JSON files in parse_live_results/parsed_analyses
    live_results_files = os.listdir(parse_live_results_dir)
    static_analysis_files = os.listdir(static_analysis_dir)

    # Iterate through the JSON files in parse_live_results/parsed_analyses
    for live_file in live_results_files:
        # Check if there is a corresponding file in static_analysis/data
        if live_file in static_analysis_files:
            live_file_path = os.path.join(parse_live_results_dir, live_file)
            static_file_path = os.path.join(static_analysis_dir, live_file)
            aggregated_file_path = os.path.join(aggregated_data_dir, live_file)

            # Read data from the live_results JSON file
            with open(live_file_path, 'r') as live_json_file:
                live_data = json.load(live_json_file)

            # Read data from the static_analysis JSON file
            with open(static_file_path, 'r') as static_json_file:
                static_data = json.load(static_json_file)

            # Combine the data into a new dictionary
            aggregated_data = {'live': live_data, 'static': static_data}

            # Write the aggregated data to a new JSON file in the aggregated_data directory
            with open(aggregated_file_path, 'w') as aggregated_json_file:
                json.dump(aggregated_data, aggregated_json_file, indent=4)

            print(f'Aggregated data for {live_file}.')

    print('Aggregation complete.')

# Call the function to aggregate the data
aggregate_json_data()
