import os
import pandas as pd
import subprocess
import glob, time
import hashlib

source_path = '/home/austax/research/samples'
output_dir_base = 'java_decompiled'

def decompile_jar(input_file, output_folder, timeout=20):
    cmd = [
        "java", "-jar", "/home/austax/research/jd-cli-1.2.1.jar",
        "-od", output_folder, input_file
    ]
    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        start_time = time.time()

        while process.poll() is None:
            elapsed_time = time.time() - start_time
            if elapsed_time > timeout:
                process.terminate()
                print(f"Decompilation of '{input_file}' took longer than {timeout} seconds. Terminated.")
                return

            time.sleep(1)

        stdout, stderr = process.communicate()  # Capture stdout and stderr

        if process.returncode == 0:
            print(f"Decompiled '{input_file}' to '{output_folder}'")
        else:
            print(f"Failed to decompile '{input_file}'. Error: {stderr}")
    except Exception as e:
        print(f"An error occurred: {e}")
def process_csv_row(row):
    filename = row['Filename']
    if not filename.lower().endswith(".jar"): return
    hash_value = row['Hash']
    search_path = os.path.join(source_path, '**', f'{filename}')
    
    found_files = glob.glob(search_path, recursive=True)
    if found_files:
        jar_file = found_files[0]
        output_dir = os.path.join(output_dir_base, hash_value)
        output_file = os.path.join(output_dir, f'{filename}')
        
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        if not os.path.exists(output_file):
            decompile_jar(jar_file, output_dir)
        else:
            pass
            # print(f"Decompiled file '{filename}' with hash '{hash_value}' already exists")
    else:
        print(f"Could not find file '{filename}' with hash '{hash_value}'")

def main():
    if not os.path.exists(output_dir_base):
        os.makedirs(output_dir_base)
    
    csv_file = 'sample_list.csv'
    
    if not os.path.exists(csv_file):
        print(f"CSV file '{csv_file}' not found.")
        return
    
    try:
        df = pd.read_csv(csv_file)
        for _, row in df.iterrows():
            process_csv_row(row)
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
