import os
import pandas as pd
import subprocess
import glob

source_path = '/home/austax/research/samples'
def run_strings(input_file, output_file):
    cmd = ["strings", input_file]
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        with open(output_file, "w") as f:
            f.write(result.stdout)
        print(f"Extracted strings from '{input_file}' to '{output_file}'")
    except subprocess.CalledProcessError:
        print(f"Failed to extract strings from '{input_file}'")

def process_csv_row(row):
    filename = row['Filename']
    hash_value = row['Hash']
    search_path = os.path.join(source_path, '**', f'{filename}')
    
    found_files = glob.glob(search_path, recursive=True)
    if found_files:
        json_file = found_files[0]
        output_dir = 'extracted_strings'
        output_file = os.path.join(output_dir, f'{hash_value}.txt')
        
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        if not os.path.exists(output_file):
            run_strings(json_file, output_file)
        else:
            pass
            #print(f"Extract already exists for '{filename}' with hash '{hash_value}'")
    else:
        print(f"Could not find file '{filename}' with hash '{hash_value}'")

def main():
    csv_file = 'sample_list.csv'
    
    if not os.path.exists(csv_file):
        print(f"CSV file '{csv_file}' not found.")
        return
    
    try:
        df = pd.read_csv(csv_file)
        for _, row in df.iterrows():
            process_csv_row(row)
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
