import os
import re
import json
import pefile
import zipfile
import subprocess
import pandas as pd
import glob
import ipaddress

from java_static_analysis import JavaStaticAnalysis
java_static_analysis = JavaStaticAnalysis()

from exe_static_analysis import ExeStaticAnalysis
exe_static_analysis = ExeStaticAnalysis()

source_path = '/home/austax/research/samples'



def process_csv_row(row):
    filename = row['Filename']

    hash_value = row['Hash']
    search_path = os.path.join(source_path, '**', f'{filename}')
    
    found_files = glob.glob(search_path, recursive=True)
    if found_files:
        binary_file = found_files[0]
        if os.path.exists(f"data/{hash_value}.json"):
            print(f"skipping {hash_value}")
            return

        if binary_file.lower().endswith(".exe") or binary_file.lower().endswith(".msi"):
            result = exe_static_analysis.static_analysis(binary_file, hash_value)
        elif binary_file.lower().endswith(".jar"):
            result = java_static_analysis.static_analysis(binary_file, hash_value)

        result['source_file'] = binary_file

        output_file = os.path.join('data', f'{hash_value}.json')
        
        if not os.path.exists('data'):
            os.makedirs('data')
        
        with open(output_file, 'w') as f:
            json.dump(result, f, indent=4)
            
        print(f"Processed '{binary_file}' and saved result to '{output_file}'")
    else:
        print(f"Could not find file '{filename}' with hash '{hash_value}'")

def main():
    csv_file = 'sample_list.csv'
    
    if not os.path.exists(csv_file):
        print(f"CSV file '{csv_file}' not found.")
        return
    
    try:
        df = pd.read_csv(csv_file)
        for _, row in df.iterrows():
            process_csv_row(row)
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()