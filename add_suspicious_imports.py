# The purpose of this script is to update the dataset to include a count of suspicious function
# imports for PE files.

import os
import json
## LIST:
# RegCloseKey
# RegOpenKey
# RegQueryValue
# RegSetValue
# RtlCreateRegistryKey
# RtlWriteRegistryValue
# CheckRemoteDebuggerPresent
# FindWindow
# GetLastError
# IsDebuggerPresent
# sleep
# OutputDebugString
# GetAdaptersInfo
# FindWindow
# GetTickCount
# NtSettInformationProcess
# DebugActiveProcess
# QueryPerformanceCounter
# NtQueryInformationProcess
# VirtualAllocEx
# LoadLibrary
# VirtualFree
# GetProcAddress
# LdrLoadDll
# LoadResource
# VirtualProtectEx
# CommandLineToArg
# ShellExecute
# system
# WinExec
# SetWindowsHook
# RegisterHotKey
# GetKeyState
# MapVirtualKey
# listen
# socket
# accept
# bind
# connect
# send
# recv
# FtpPutFile
# InternetOpen
# InternetOpenUrl
# InternetWriteFile
# ConnetNamedPipe
# PeekNamedPike
# gethostbyname
# inet addr
# InternetReadFie
# BitBlt
# GetDC
# CryptDecrypt
# CryptGenRandom
# CryptAcqureContext
# SetPrivilege
# LookupPrivilege
# CreateRemoteThread
# WriteProcessMemory
# ReadProcessMemory
# OpenProcess
# NtOpenProcess
# NtReadVirtualMemory
# NtWriteVirtualMemory
# CreateFile
# CreateFileMapping
# CreateMutex
# CreateProcess
# CreateService
# ControlService
# OpenSCManager
# StartServiceCtrlDispatcher
# CreateRemoteThread
# WriteProcessMemory
# ReadProcessMemory
# OpenProcess
# NtOpenProcess
# NtReadVirtualMemory
# NtWriteVirtualMemory
# MapViewofFile
# Module32First
# Module32Next
# OpenMutex
# OpenProcess
# QueueUserAPC
# SetFileTime
# SfcTerminateWeatherThread
# SuspendThread
# Thread32First
# Thread32Next
# WriteProcessMemory
# ResumeThread
# DllCanUnloadNow
# DllGetClassObject
# DllInstall
# DllRegisterServer
# DllUnregisterServer
# NetScheduleJobAdd
# FindFirstFile
# FindNextFile
# FindResource
# WSAStartup

suspicious_imports = [
    "regclosekey",
    "regopenkey",
    "regqueryvalue",
    "regsetvalue",
    "rtlcreateregistrykey",
    "rtlwriteregistryvalue",
    "checkremotedebuggerpresent",
    "findwindow",
    "getlasterror",
    "isdebuggerpresent",
    "sleep",
    "outputdebugstring",
    "getadaptersinfo",
    "findwindow",
    "gettickcount",
    "ntsettinformationprocess",
    "debugactiveprocess",
    "queryperformancecounter",
    "ntqueryinformationprocess",
    "virtualallocex",
    "loadlibrary",
    "virtualfree",
    "getprocaddress",
    "ldrloaddll",
    "loadresource",
    "virtualprotectex",
    "commandlinetoarg",
    "shellexecute",
    "system",
    "winexec",
    "setwindowshook",
    "registerhotkey",
    "getkeystate",
    "mapvirtualkey",
    "listen",
    "socket",
    "accept",
    "bind",
    "connect",
    "send",
    "recv",
    "ftpputfile",
    "internetopen",
    "internetopenurl",
    "internetwritefile",
    "connetnamedpipe",
    "peeknamedpike",
    "gethostbyname",
    "inet addr",
    "internetreadfie",
    "bitblt",
    "getdc",
    "cryptdecrypt",
    "cryptgenrandom",
    "cryptacqurecontext",
    "setprivilege",
    "lookupprivilege",
    "createremotethread",
    "writeprocessmemory",
    "readprocessmemory",
    "openprocess",
    "ntopenprocess",
    "ntreadvirtualmemory",
    "ntwritevirtualmemory",
    "createfile",
    "createfilemapping",
    "createmutex",
    "createprocess",
    "createservice",
    "controlservice",
    "openscmanager",
    "startservicectrldispatcher",
    "createremotethread",
    "writeprocessmemory",
    "readprocessmemory",
    "openprocess",
    "ntopenprocess",
    "ntreadvirtualmemory",
    "ntwritevirtualmemory",
    "mapviewoffile",
    "module32first",
    "module32next",
    "openmutex",
    "openprocess",
    "queueuserapc",
    "setfiletime",
    "sfcterminateweatherthread",
    "suspendthread",
    "thread32first",
    "thread32next",
    "writeprocessmemory",
    "resumethread",
    "dllcanunloadnow",
    "dllgetclassobject",
    "dllinstall",
    "dllregisterserver",
    "dllunregisterserver",
    "netschedulejobadd",
    "findfirstfile",
    "findnextfile",
    "findresource",
    "wsastartup"
]


# Function to check if a function name is suspicious
def is_suspicious(function_name):
    return function_name.lower() in suspicious_imports

# Define the path to the aggregated_data folder
aggregated_data_dir = 'aggregated_data'

# Iterate through JSON files in the aggregated_data folder
for filename in os.listdir(aggregated_data_dir):
    if filename.endswith('.json'):
        file_path = os.path.join(aggregated_data_dir, filename)

        # Read the JSON data from the file
        with open(file_path, 'r') as json_file:
            data = json.load(json_file)
        if data['static']['source_file'].endswith(".exe"):
            # Check for 'static', 'header', 'imported_functions' keys
            suspicious_imports_count = 0
            for key in data['static']['header']['imported_functions']['functions']:
                
                if is_suspicious(key):
                    suspicious_imports_count += data['static']['header']['imported_functions']['functions'][key]

            # Add or update 'suspicious_imports' key
            data['static']['header']['imported_functions']['suspicious_imports'] = suspicious_imports_count

            # Write the updated JSON data back to the file
            with open(file_path, 'w') as json_file:
                json.dump(data, json_file, indent=4)

            print(f'Updated {filename}.')
        else: continue

print('Processing complete.')